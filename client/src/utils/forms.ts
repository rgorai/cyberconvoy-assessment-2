/**
 * @author rgorai
 * @description reduce a FormSpecs object into a similar object
 * @param formSpecKeys list of keys of FormSpec object
 * @param mutation function returning a [key, value] pairing for each 'formSpecKeys' element
 * @returns the reduction of the 'formSpecKeys' array generated by the 'mutation' reducer
 */
export const reduceFormSpecs = <T, K>(
  formSpecKeys: (keyof T)[],
  mutation: (_: keyof T) => [keyof T, K] | undefined
) =>
  formSpecKeys.reduce((p, c) => {
    const mutVal = mutation(c)
    return {
      ...p,
      ...(mutVal ? { [mutVal[0]]: mutVal[1] } : {}),
    }
  }, {}) as Record<keyof T, K>

/**
 * @author rgorai
 * @description create tools to manage the state of a form based on a generic type
 * @param specs the {@link FormSpecs} object to generate the tools from
 * @returns an object containing an array version of the form specs (with the keyname included in each element), an object that resembles the form's default state, an object representing the default state of errors associated with each field, and a function to validate the entire form object
 */
export const getFormUtils = <T extends Record<any, any>>(
  specs: FormSpecs<T>
): {
  formSpecsArr: (FormSpecs<T>[keyof T] & {
    keyName: keyof T
  })[]
  defaultFormState: Record<keyof T, string>
  defaultFormErrorState: Record<keyof T, string | null>
  validateForm: (formData: T) => string | null
} => {
  const formKeys = Object.keys(specs) as (keyof T)[]

  const defaultFormState = reduceFormSpecs(formKeys, (c) => [
    c,
    specs[c].defaultValue,
  ])

  const defaultFormErrorState = reduceFormSpecs(formKeys, (c) => [c, null])

  const validateForm = (formData: T): string | null => {
    for (const key of formKeys)
      try {
        specs[key].validation?.(formData[key])
      } catch (err) {
        return String(err)
      }
    return null
  }

  const formSpecsArr = formKeys.map((keyName) => ({
    ...specs[keyName],
    keyName,
  }))

  return {
    formSpecsArr,
    defaultFormState,
    defaultFormErrorState,
    validateForm,
  }
}
